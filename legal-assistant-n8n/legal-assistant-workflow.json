{
  "name": "Legal Assistant Bot",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "telegram-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "5801a7dc-8eb0-44c4-b9e9-162aa5a52589",
      "name": "Telegram Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2048,
        496
      ],
      "webhookId": "191c5774-e8b2-4e17-8786-e641403e5046"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.body.message?.text || '' }}",
              "operation": "isNotEmpty"
            },
            {
              "value1": "={{ $json.body.message?.voice?.file_id || '' }}",
              "operation": "isNotEmpty"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "7a15e131-6174-4ddd-94d2-2e7ec037d0ed",
      "name": "Has Message Content",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1840,
        496
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.body.message?.voice ? 'voice' : 'text' }}",
              "value2": "voice"
            }
          ]
        }
      },
      "id": "c068780e-fc1f-44f0-9042-a09a5f03fe5d",
      "name": "Is Voice Message",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1616,
        384
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.body.message.voice.file_id }}",
        "additionalFields": {}
      },
      "id": "d593902b-dd1c-4419-b097-c34faf794ee8",
      "name": "Get Voice File",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -1440,
        240
      ],
      "webhookId": "ee2240fc-1d1d-41f6-bfa6-1b126b8ceadf",
      "credentials": {
        "telegramApi": {
          "id": "zcv8VyBLDeXHWW3a",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Fix file format for Groq API compatibility\nconst items = [];\n\nfor (const item of $input.all()) {\n  // Get the binary data from Telegram\n  const binaryData = item.binary?.data;\n  \n  if (binaryData) {\n    // Set proper filename and mime type for Groq API\n    binaryData.fileName = 'voice_message.ogg';\n    binaryData.mimeType = 'audio/ogg';\n    \n    items.push({\n      json: item.json,\n      binary: {\n        data: binaryData\n      }\n    });\n  } else {\n    items.push(item);\n  }\n}\n\nreturn items;"
      },
      "id": "9ff5ad33-a581-4d8c-9c2d-c760c9442532",
      "name": "Fix Audio Format",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1248,
        192
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/audio/transcriptions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer PLACEHOLDER_FOR_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "model",
              "value": "whisper-large-v3"
            },
            {
              "name": "response_format",
              "value": "json"
            }
          ]
        },
        "options": {}
      },
      "id": "a8ffb359-a39d-4048-8d6a-e0d961915b6b",
      "name": "Transcribe Voice (Groq)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -1072,
        240
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract and normalize message content\nconst items = [];\n\nfor (const item of $input.all()) {\n  let messageText = '';\n  let userId = '';\n  let chatId = '';\n  let messageId = '';\n  \n  // Handle different message types - check for body wrapper\n  const message = item.json.body?.message || item.json.message;\n  \n  if (message) {\n    userId = message.from.id;\n    chatId = message.chat.id;\n    messageId = message.message_id;\n    \n    // Text message\n    if (message.text) {\n      messageText = message.text;\n    }\n  }\n  \n  // Handle transcribed voice message from Groq API response\n  if (item.json.text && !messageText) {\n    messageText = item.json.text;\n    // Get user info from the original webhook data if available\n    const webhookData = $('Telegram Webhook').first()?.json;\n    if (webhookData?.body?.message) {\n      userId = webhookData.body.message.from.id;\n      chatId = webhookData.body.message.chat.id;\n      messageId = webhookData.body.message.message_id;\n    }\n  }\n  \n  items.push({\n    json: {\n      messageText: messageText,\n      userId: userId,\n      chatId: chatId,\n      messageId: messageId,\n      timestamp: new Date().toISOString(),\n      originalMessage: item.json\n    }\n  });\n}\n\nreturn items;"
      },
      "id": "2e58e877-d275-4db2-9168-ea8de9202960",
      "name": "Normalize Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1392,
        496
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer PLACEHOLDER_FOR_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"llama-3.3-70b-versatile\",\n  \"messages\": [{\n      \"role\": \"system\",\n      \"content\": \"You are a content classifier for a legal assistant bot. Determine if messages are related to legal/criminal matters.\\n\\nRespond with 'VALID' if the message contains:\\n- Direct legal questions\\n- Criminal scenarios or situations\\n- Descriptions of potential crimes or violations\\n- Court cases, statutes, or legal procedures\\n- Requests for legal advice or analysis\\n- Fact patterns that may involve legal issues\\n- Property damage or destruction scenarios\\n- Domestic disputes or relationship conflicts with legal implications\\n- Theft, assault, harassment, or any criminal behavior\\n- Civil law matters (contracts, torts, property disputes)\\n\\nRespond with 'INVALID: [brief reason]' if the message is clearly unrelated to legal matters (weather, sports, general chat, etc.).\\n\\nExamples of VALID messages:\\n- 'What are Miranda rights?'\\n- 'A wife smashes her husband's phone'\\n- 'Someone took my bike without permission'\\n- 'What happens if I don't pay a traffic ticket?'\\n- 'My neighbor is playing loud music at 2am'\\n- 'Wife smashed my phone'\\n- 'My landlord won't fix the heat'\\n- 'Someone hit my car and drove away'\"\n  }, {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.messageText }}\"\n  }]\n} ",
        "options": {}
      },
      "id": "3c368754-7aca-4184-88f8-5591d05a10eb",
      "name": "Validate Content (Groq)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -1168,
        496
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.choices && $json.choices[0] && $json.choices[0].message ? $json.choices[0].message.content : 'INVALID: API Error' }}",
              "operation": "contains",
              "value2": "VALID"
            }
          ]
        }
      },
      "id": "025c84b1-900f-4dd2-bcf9-52c3e401f54d",
      "name": "Is Valid Request",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -944,
        496
      ]
    },
    {
      "parameters": {
        "tableId": "user_conversations",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "user_id",
              "fieldValue": "={{ $('Normalize Message').item.json.userId + Math.floor(Math.random() * 1000) + 1}}"
            },
            {
              "fieldId": "chat_id",
              "fieldValue": "={{ $('Normalize Message').item.json.chatId + Math.floor(Math.random() * 1000) + 1}}"
            },
            {
              "fieldId": "conversation_history",
              "fieldValue": "={{ $('Normalize Message').item.json.messageText }}"
            }
          ]
        }
      },
      "id": "d2613755-e361-433e-ae57-e71ada16ce0f",
      "name": "Log Rejection",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -592,
        864
      ],
      "credentials": {
        "supabaseApi": {
          "id": "GAXI2okVDAx3Ea8z",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Normalize Message').item.json.chatId }}",
        "text": "=I'm sorry, but I can only assist with legal and criminal matters. Your message appears to be outside my scope of expertise.\n\nReason: {{ $('Validate Content (Groq)').item.json.choices[0].message.content }}\n\nI can help you with:\n• Direct legal questions (\"What are Miranda rights?\")\n• Criminal scenarios (\"Someone took my bike without asking\")\n• Court cases and rulings\n• Legal procedures and statutes\n• Fact patterns involving potential crimes\n• Civil and criminal law analysis",
        "additionalFields": {}
      },
      "id": "b419aa9e-3a8c-41db-8057-42dd738a2ba7",
      "name": "Send Rejection Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -48,
        864
      ],
      "webhookId": "bfbe4895-07b0-4a1c-81d8-a6f04db77463",
      "credentials": {
        "telegramApi": {
          "id": "zcv8VyBLDeXHWW3a",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "user_conversations",
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $('Normalize Message').item.json.userId }}"
            }
          ]
        }
      },
      "id": "dc4a3e8c-5b0c-4ce7-b1e3-33d1a1c76bf8",
      "name": "Get Conversation Memory",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        0,
        352
      ],
      "credentials": {
        "supabaseApi": {
          "id": "GAXI2okVDAx3Ea8z",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "legal_documents",
        "filters": {
          "conditions": [
            {}
          ]
        }
      },
      "id": "3e3a6409-9b94-49c8-a5cc-3526e2ff366d",
      "name": "Get Legal Documents",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -96,
        560
      ],
      "credentials": {
        "supabaseApi": {
          "id": "GAXI2okVDAx3Ea8z",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://www.courtlistener.com/api/rest/v3/search/?q={{ encodeURIComponent($('Normalize Message').item.json.messageText) }}&type=o&format=json",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token PLACEHOLDER_FOR_API_KEY"
            }
          ]
        },
        "options": {}
      },
      "id": "54eb416c-3371-419d-8a79-9d2c9c6ae4cc",
      "name": "Search Court Cases",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        176
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "=https://api.case.law/v1/cases/?search={{ encodeURIComponent($('Normalize Message').item.json.messageText) }}&limit=5",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token PLACEHOLDER_FOR_API_KEY"
            }
          ]
        },
        "options": {}
      },
      "id": "5008894c-3b04-48c5-be52-8c212775cb2c",
      "name": "Search Case Law",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        0
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced vector similarity search for legal documents\nconst items = [];\n\nconst userQuery = $('Normalize Message').item.json.messageText;\nconst legalDocs = $('Get Legal Documents').all();\n\n// Simple keyword-based similarity for now - can be enhanced with embeddings\nfunction calculateSimilarity(query, text) {\n  const queryWords = query.toLowerCase().split(/\\s+/);\n  const textWords = text.toLowerCase().split(/\\s+/);\n  \n  let matches = 0;\n  queryWords.forEach(word => {\n    if (textWords.some(textWord => textWord.includes(word) || word.includes(textWord))) {\n      matches++;\n    }\n  });\n  \n  return matches / queryWords.length;\n}\n\n// Score and rank documents\nconst scoredDocs = legalDocs.map(doc => {\n  const titleScore = calculateSimilarity(userQuery, doc.json.title || '');\n  const contentScore = calculateSimilarity(userQuery, doc.json.content || '');\n  const typeScore = calculateSimilarity(userQuery, doc.json.type || '');\n  \n  return {\n    ...doc.json,\n    relevanceScore: (titleScore * 2 + contentScore + typeScore * 0.5) / 3.5\n  };\n}).filter(doc => doc.relevanceScore > 0.1)\n  .sort((a, b) => b.relevanceScore - a.relevanceScore)\n  .slice(0, 5); // Top 5 most relevant\n\nitems.push({\n  json: {\n    relevantDocuments: scoredDocs,\n    searchQuery: userQuery,\n    totalDocuments: legalDocs.length,\n    relevantCount: scoredDocs.length\n  }\n});\n\nreturn items;"
      },
      "id": "633c7181-f16f-4140-9166-735904a500ce",
      "name": "Vector Document Search",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        112,
        560
      ]
    },
    {
      "parameters": {
        "jsCode": "// Focused RAG context preparation for scenario-specific legal analysis\nconst items = [];\n\nconst normalizedMessage = $('Normalize Message').item.json;\nconst conversationMemory = $('Get Conversation Memory').all();\nconst vectorResults = $('Vector Document Search').all();\nconst courtCases = $('Search Court Cases').all();\nconst caseLaw = $('Search Case Law').all();\n\n// Build conversation history\nlet conversationHistory = '';\nif (conversationMemory.length > 0 && conversationMemory[0].json.conversation_history) {\n  conversationHistory = conversationMemory[0].json.conversation_history;\n}\n\n// Build enhanced document context from vector search\nlet documentContext = '';\nif (vectorResults.length > 0 && vectorResults[0].json.relevantDocuments) {\n  documentContext = vectorResults[0].json.relevantDocuments.map(doc => {\n    return `Document: ${doc.title} (Relevance: ${(doc.relevanceScore * 100).toFixed(1)}%)\\nType: ${doc.type}\\nContent: ${doc.content}\\n---`;\n  }).join('\\n');\n}\n\n// Create focused AI prompt for scenario-specific analysis\nconst aiPrompt = `Analyze this SPECIFIC legal scenario and provide ONLY directly relevant charges and laws. Ignore generic legal principles unless they directly apply to this exact situation.\n\nSCENARIO TO ANALYZE:\n${normalizedMessage.messageText}\n\nRELEVANT DOCUMENTS:\n${documentContext}\n\nINSTRUCTIONS:\n- Focus ONLY on charges that directly apply to THIS specific scenario\n- Ignore Miranda rights, general legal advice, or unrelated laws\n- Be extremely concise - maximum 2-3 items per section\n- Use bullet points with specific statute numbers when available\n- If no charges apply, say \"No clear violations identified\"\n\nREQUIRED FORMAT (use exact headers):\nSUMMARY:\n• [Very brief summary on what the scenario or legal request received]\n\nCHARGES:\n• [Only charges that directly apply - include statute numbers]\n• [Maximum 3 charges]\n\nELEMENTS TO PROVE:\n• [Key evidence needed for each charge]\n• [Be specific to the scenario]\n\nPENALTIES:\n• [Specific penalties for identified charges only]\n• [Include fine amounts/jail time if known]\n\nDEFENSES:\n• [Only defenses that apply to THIS scenario]\n• [Maximum 2-3 relevant defenses]\n\nIMPORTANT: Do not include general legal information. Only analyze what directly relates to the specific scenario provided.`;\n\nitems.push({\n  json: {\n    aiPrompt: aiPrompt,\n    userMessage: normalizedMessage.messageText,\n    userId: normalizedMessage.userId,\n    chatId: normalizedMessage.chatId,\n    conversationHistory: conversationHistory,\n    timestamp: normalizedMessage.timestamp,\n    retrievedSources: {\n      documents: vectorResults[0]?.json?.relevantCount || 0,\n      courtCases: courtCases[0]?.json?.count || 0,\n      caseLaw: caseLaw[0]?.json?.count || 0\n    }\n  }\n});\n\nreturn items;"
      },
      "id": "d53b6229-9a4b-4727-a97d-1e7702e59439",
      "name": "Prepare AI Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        704,
        368
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer PLACEHOLDER_FOR_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"llama-3.3-70b-versatile\",\n  \"messages\": [{\n      \"role\": \"system\",\n      \"content\": \"You are a specialized legal AI assistant with expertise in criminal law and legal matters. Provide comprehensive, accurate legal analysis based on the provided context.\"\n  }, {\n      \"role\": \"user\",\n      \"content\": {{ JSON.stringify($json.aiPrompt) }}\n  }],\n  \"max_tokens\": 2000,\n  \"temperature\": 0.3\n}",
        "options": {}
      },
      "id": "f89f6f49-328c-4f25-af75-bbe35a83058d",
      "name": "AI Legal Analysis (Groq)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        896,
        368
      ]
    },
    {
      "parameters": {
        "jsCode": "// Format AI response with HTML line breaks for Telegram\nconst items = [];\n\n// Get AI response from Groq format\nconst aiResponse = $json.choices && $json.choices[0] && $json.choices[0].message && $json.choices[0].message.content || 'Unable to generate response';\nconst context = $('Prepare AI Context').item.json;\n\n// Update conversation history\nconst newConversationEntry = `User: ${context.userMessage}\\nAssistant: ${aiResponse}\\n---\\n`;\nconst updatedHistory = context.conversationHistory + newConversationEntry;\n\n// Clean formatting and convert to HTML for Telegram\nlet formattedResponse = aiResponse;\n\n\n\n\n\n\n// Telegram message limit is 4096 characters\nconst MAX_LENGTH = 4000; // Leave some buffer\n\nif (formattedResponse.length > MAX_LENGTH) {\n  // Try to find a good break point\n  let truncateAt = MAX_LENGTH;\n  const breakPoints = ['. ', '\\n', ': '];\n  \n  for (const breakPoint of breakPoints) {\n    const lastBreak = formattedResponse.lastIndexOf(breakPoint, MAX_LENGTH - 100);\n    if (lastBreak > MAX_LENGTH / 2) {\n      truncateAt = lastBreak + breakPoint.length;\n      break;\n    }\n  }\n  \n  formattedResponse = formattedResponse.substring(0, truncateAt);\n}\n\nitems.push({\n  json: {\n    formattedResponse: formattedResponse,\n    userId: context.userId,\n    chatId: context.chatId,\n    updatedConversationHistory: updatedHistory,\n    timestamp: context.timestamp,\n    rawAiResponse: aiResponse\n  }\n});\n\nreturn items;"
      },
      "id": "24ddc268-5f97-4354-b515-5ed9de6bc02e",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1104,
        368
      ]
    },
    {
      "parameters": {
        "tableId": "user_conversations",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "user_id",
              "fieldValue": "={{ $('Normalize Message').first().json.userId }}"
            },
            {
              "fieldId": "chat_id",
              "fieldValue": "={{ $('Get Conversation Memory').last().json.chat_id + 1 }}"
            }
          ]
        }
      },
      "id": "6caf4a9d-f1d6-48fa-989c-7829f32572dd",
      "name": "Update Conversation Memory",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1312,
        304
      ],
      "credentials": {
        "supabaseApi": {
          "id": "GAXI2okVDAx3Ea8z",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.formattedResponse }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "5eac4ca9-d0ed-41f9-8cb7-4a9bfaffd08b",
      "name": "Send Legal Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1312,
        432
      ],
      "webhookId": "8e9aa2f5-0f18-4398-a116-f2f5984c55a8",
      "credentials": {
        "telegramApi": {
          "id": "zcv8VyBLDeXHWW3a",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"success\", \"message\": \"Message processed successfully\" } }}",
        "options": {}
      },
      "id": "d6426ec1-2452-4438-871a-4150087abca9",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1616,
        576
      ]
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        464,
        368
      ],
      "id": "7679dc57-ba80-4873-93d5-c50365223a57",
      "name": "Merge Legal Data"
    }
  ],
  "pinData": {
    "Telegram Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.modernwizard.win",
            "content-length": "463",
            "accept-encoding": "gzip, br",
            "cdn-loop": "cloudflare; loops=1",
            "cf-connecting-ip": "91.108.5.76",
            "cf-ipcountry": "NL",
            "cf-ray": "98cb49a1cf28f6ad-AMS",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-warp-tag-id": "301047e0-45cc-4792-9107-e54ecb369660",
            "connection": "keep-alive",
            "content-type": "application/json",
            "x-forwarded-for": "91.108.5.76",
            "x-forwarded-proto": "https"
          },
          "params": {},
          "query": {},
          "body": {
            "update_id": 383995329,
            "message": {
              "message_id": 56,
              "from": {
                "id": 7998792537,
                "is_bot": false,
                "first_name": "CleverCortex",
                "username": "CleverCortex",
                "language_code": "en"
              },
              "chat": {
                "id": 7998792537,
                "first_name": "CleverCortex",
                "username": "CleverCortex",
                "type": "private"
              },
              "date": 1760153518,
              "voice": {
                "duration": 1,
                "mime_type": "audio/ogg",
                "file_id": "AwACAgEAAxkBAAM4aOnPrjae8n9Qg-7c06BtMLMTSkAAAqwFAAL4FVBHsX-Gkj5Jw-82BA",
                "file_unique_id": "AgADrAUAAvgVUEc",
                "file_size": 4603
              }
            }
          },
          "webhookUrl": "https://n8n.modernwizard.win/webhook/telegram-webhook",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Telegram Webhook": {
      "main": [
        [
          {
            "node": "Has Message Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Message Content": {
      "main": [
        [
          {
            "node": "Is Voice Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Voice Message": {
      "main": [
        [
          {
            "node": "Get Voice File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Normalize Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Voice File": {
      "main": [
        [
          {
            "node": "Fix Audio Format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix Audio Format": {
      "main": [
        [
          {
            "node": "Transcribe Voice (Groq)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Voice (Groq)": {
      "main": [
        [
          {
            "node": "Normalize Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Message": {
      "main": [
        [
          {
            "node": "Validate Content (Groq)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Content (Groq)": {
      "main": [
        [
          {
            "node": "Is Valid Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Valid Request": {
      "main": [
        [
          {
            "node": "Get Conversation Memory",
            "type": "main",
            "index": 0
          },
          {
            "node": "Search Court Cases",
            "type": "main",
            "index": 0
          },
          {
            "node": "Search Case Law",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Legal Documents",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Rejection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Rejection": {
      "main": [
        [
          {
            "node": "Send Rejection Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Rejection Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Conversation Memory": {
      "main": [
        [
          {
            "node": "Merge Legal Data",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Get Legal Documents": {
      "main": [
        [
          {
            "node": "Vector Document Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Court Cases": {
      "main": [
        [
          {
            "node": "Merge Legal Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Search Case Law": {
      "main": [
        [
          {
            "node": "Merge Legal Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Legal Data": {
      "main": [
        [
          {
            "node": "Prepare AI Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare AI Context": {
      "main": [
        [
          {
            "node": "AI Legal Analysis (Groq)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Legal Analysis (Groq)": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Update Conversation Memory",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Legal Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Conversation Memory": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Legal Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vector Document Search": {
      "main": [
        [
          {
            "node": "Merge Legal Data",
            "type": "main",
            "index": 3
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "createdAt": "2025-01-10T00:00:00.000Z",
  "updatedAt": "2025-01-10T00:00:00.000Z",
  "id": "legal-assistant-workflow"
}