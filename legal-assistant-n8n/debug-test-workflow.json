{
  "name": "Legal Assistant Bot - Debug Test",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "telegram-webhook-test",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-test",
      "name": "Telegram Webhook Test",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Debug: Log all incoming data\nconsole.log('=== TELEGRAM WEBHOOK DEBUG ===');\nconsole.log('Full JSON:', JSON.stringify($json, null, 2));\n\n// Check for body wrapper\nconst message = $json.body?.message || $json.message;\n\nif (message) {\n    console.log('‚úÖ Message object exists');\n    console.log('üìù Text:', message.text);\n    console.log('üë§ From ID:', message.from?.id);\n    console.log('üí¨ Chat ID:', message.chat?.id);\n    console.log('üéµ Voice:', message.voice ? 'Yes' : 'No');\n    console.log('üîß Data path: ' + ($json.body ? '$json.body.message' : '$json.message'));\n} else {\n    console.log('‚ùå No message object');\n    console.log('Available keys:', Object.keys($json));\n    if ($json.body) {\n        console.log('Body keys:', Object.keys($json.body));\n    }\n}\n\n// Create response\nconst response = {\n    chatId: message?.chat?.id || 'unknown',\n    messageText: message?.text || 'no text',\n    hasVoice: !!message?.voice,\n    userId: message?.from?.id || 'unknown',\n    timestamp: new Date().toISOString(),\n    dataPath: $json.body ? 'body.message' : 'message',\n    debugInfo: {\n        messageExists: !!message,\n        textExists: !!message?.text,\n        voiceExists: !!message?.voice,\n        hasBodyWrapper: !!$json.body,\n        fullStructure: $json\n    }\n};\n\nconsole.log('üì§ Response prepared:', JSON.stringify(response, null, 2));\n\nreturn [{ json: response }];"
      },
      "id": "debug-analysis",
      "name": "Debug Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.messageText || '' }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "has-text",
      "name": "Has Text Message",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "=ü§ñ Debug Response:\n\nüìù Your message: \"{{ $json.messageText }}\"\nüë§ User ID: {{ $json.userId }}\nüí¨ Chat ID: {{ $json.chatId }}\nüéµ Voice message: {{ $json.hasVoice ? 'Yes' : 'No' }}\n‚è∞ Processed at: {{ $json.timestamp }}\n\n‚úÖ Webhook is working correctly!\n\nNext: Check the main workflow's 'Has Message Content' node condition."
      },
      "id": "send-debug-response",
      "name": "Send Debug Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        900,
        240
      ],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "=‚ùå No text detected in message.\n\nüîç Debug info:\n{{ JSON.stringify($json.debugInfo, null, 2) }}\n\nThis suggests an issue with how Telegram is sending the webhook data."
      },
      "id": "send-error-response",
      "name": "Send Error Response", 
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        900,
        360
      ],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"debug_complete\", \"timestamp\": $json.timestamp } }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1120,
        300
      ]
    }
  ],
  "connections": {
    "Telegram Webhook Test": {
      "main": [
        [
          {
            "node": "Debug Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug Analysis": {
      "main": [
        [
          {
            "node": "Has Text Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Text Message": {
      "main": [
        [
          {
            "node": "Send Debug Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Debug Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Error Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "createdAt": "2025-01-10T00:00:00.000Z",
  "updatedAt": "2025-01-10T00:00:00.000Z",
  "id": "debug-test-workflow"
}