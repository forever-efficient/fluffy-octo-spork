version: '3.8'

services:
  n8n:
    image: n8nio/n8n:latest
    container_name: legal-assistant-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=${N8N_HOST:-0.0.0.0}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - NODE_ENV=production
      - WEBHOOK_URL=${WEBHOOK_URL:-http://localhost:5678}
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=${LOG_LEVEL:-info}
      - N8N_LOG_OUTPUT=${LOG_OUTPUT:-console}
      
      # Database Configuration (using Supabase)
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=${SUPABASE_DB_HOST}
      - DB_POSTGRESDB_PORT=${SUPABASE_DB_PORT:-5432}
      - DB_POSTGRESDB_DATABASE=${SUPABASE_DB_NAME}
      - DB_POSTGRESDB_USER=${SUPABASE_DB_USER}
      - DB_POSTGRESDB_PASSWORD=${SUPABASE_DB_PASSWORD}
      - DB_POSTGRESDB_SSL_CA=${SUPABASE_DB_SSL_CA}
      - DB_POSTGRESDB_SSL_CERT=${SUPABASE_DB_SSL_CERT}
      - DB_POSTGRESDB_SSL_KEY=${SUPABASE_DB_SSL_KEY}
      - DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED=false
      
      # API Keys and Tokens
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Security
      - N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/opt/workflows:ro
      - ./credentials:/opt/credentials:ro
    depends_on:
      - redis
    networks:
      - legal-assistant-network

  redis:
    image: redis:7-alpine
    container_name: legal-assistant-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - legal-assistant-network

  # Optional: Local PostgreSQL if not using Supabase
  # postgres:
  #   image: postgres:15
  #   container_name: legal-assistant-postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: ${DB_POSTGRESDB_DATABASE:-legal_assistant}
  #     POSTGRES_USER: ${DB_POSTGRESDB_USER:-n8n}
  #     POSTGRES_PASSWORD: ${DB_POSTGRESDB_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./database-schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - legal-assistant-network

  # Optional: Nginx reverse proxy for HTTPS
  nginx:
    image: nginx:alpine
    container_name: legal-assistant-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - n8n
    networks:
      - legal-assistant-network

volumes:
  n8n_data:
  redis_data:
  # postgres_data:

networks:
  legal-assistant-network:
    driver: bridge