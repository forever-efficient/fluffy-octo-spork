{
  "name": "PDF Legal Document Processor",
  "nodes": [
    {
      "id": "webhook-trigger",
      "name": "PDF Upload Webhook",
      "parameters": {
        "httpMethod": "POST",
        "options": {},
        "path": "process-pdf",
        "responseMode": "responseNode"
      },
      "position": [
        0,
        0
      ],
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1
    },
    {
      "id": "extract-from-file",
      "name": "Extract PDF Content",
      "parameters": {
        "mode": "file",
        "options": {}
      },
      "position": [
        200,
        0
      ],
      "type": "@n8n/n8n-nodes-langchain.documentLoaderPdf",
      "typeVersion": 1
    },
    {
      "id": "text-splitter",
      "name": "Split Into Chunks",
      "parameters": {
        "chunkOverlap": 200,
        "chunkSize": 1000,
        "options": {}
      },
      "position": [
        400,
        0
      ],
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacter",
      "typeVersion": 1
    },
    {
      "credentials": {
        "supabaseApi": "PLACEHOLDER_FOR_SUPABASE_CREDENTIALS"
      },
      "id": "vector-store-insert",
      "name": "Insert Into Vector Store",
      "parameters": {
        "mode": "insertDocuments",
        "options": {},
        "tableName": "legal_documents_vectors"
      },
      "position": [
        600,
        0
      ],
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1
    },
    {
      "id": "process-metadata",
      "name": "Process PDF Metadata",
      "parameters": {
        "jsCode": "// Extract metadata from PDF upload\nconst items = [];\n\nfor (const item of $input.all()) {\n  const webhookData = item.json.body || item.json;\n  const fileData = item.binary?.data;\n  \n  // Extract metadata from request\n  const metadata = {\n    title: webhookData.title || fileData?.fileName || 'Untitled Document',\n    document_type: webhookData.document_type || 'legal_document',\n    category: webhookData.category || 'general',\n    jurisdiction: webhookData.jurisdiction || 'unknown',\n    date_created: webhookData.date_created || new Date().toISOString().split('T')[0],\n    uploaded_by: webhookData.uploaded_by || 'system',\n    source: webhookData.source || 'manual_upload',\n    tags: webhookData.tags || [],\n    file_size: fileData?.fileSize || 0,\n    file_name: fileData?.fileName || 'unknown.pdf'\n  };\n  \n  items.push({\n    json: {\n      metadata: metadata,\n      originalData: webhookData\n    },\n    binary: item.binary\n  });\n}\n\nreturn items;"
      },
      "position": [
        200,
        200
      ],
      "type": "n8n-nodes-base.code",
      "typeVersion": 2
    },
    {
      "credentials": {
        "supabaseApi": "PLACEHOLDER_FOR_SUPABASE_CREDENTIALS"
      },
      "id": "log-processing",
      "name": "Log Processing Result",
      "parameters": {
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('Process PDF Metadata').item.json.metadata.file_name }}"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $('Process PDF Metadata').item.json.metadata.title }}"
            },
            {
              "fieldId": "document_type",
              "fieldValue": "={{ $('Process PDF Metadata').item.json.metadata.document_type }}"
            },
            {
              "fieldId": "category",
              "fieldValue": "={{ $('Process PDF Metadata').item.json.metadata.category }}"
            },
            {
              "fieldId": "jurisdiction",
              "fieldValue": "={{ $('Process PDF Metadata').item.json.metadata.jurisdiction }}"
            },
            {
              "fieldId": "processing_status",
              "fieldValue": "completed"
            },
            {
              "fieldId": "chunks_created",
              "fieldValue": "={{ $('Split Into Chunks').all().length }}"
            },
            {
              "fieldId": "processed_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        },
        "operation": "insert",
        "tableId": "document_processing_logs"
      },
      "position": [
        800,
        0
      ],
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1
    },
    {
      "id": "webhook-response",
      "name": "Success Response",
      "parameters": {
        "options": {},
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"success\", \"message\": \"PDF processed successfully\", \"chunks_created\": $('Split Into Chunks').all().length, \"file_name\": $('Process PDF Metadata').item.json.metadata.file_name } }}"
      },
      "position": [
        1000,
        0
      ],
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1
    },
    {
      "id": "error-handler",
      "name": "Error Response",
      "parameters": {
        "options": {},
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"error\", \"message\": \"Failed to process PDF\", \"error\": $json.error || \"Unknown error\" } }}",
        "responseCode": 500
      },
      "position": [
        600,
        200
      ],
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1
    }
  ],
  "connections": {
    "PDF Upload Webhook": {
      "main": [
        [
          {
            "index": 0,
            "node": "Extract PDF Content",
            "type": "main"
          },
          {
            "index": 0,
            "node": "Process PDF Metadata",
            "type": "main"
          }
        ]
      ]
    },
    "Extract PDF Content": {
      "main": [
        [
          {
            "index": 0,
            "node": "Split Into Chunks",
            "type": "main"
          }
        ]
      ]
    },
    "Split Into Chunks": {
      "main": [
        [
          {
            "index": 0,
            "node": "Insert Into Vector Store",
            "type": "main"
          }
        ]
      ]
    },
    "Insert Into Vector Store": {
      "main": [
        [
          {
            "index": 0,
            "node": "Log Processing Result",
            "type": "main"
          }
        ]
      ]
    },
    "Log Processing Result": {
      "main": [
        [
          {
            "index": 0,
            "node": "Success Response",
            "type": "main"
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "meta": {
    "templateCredsSetupCompleted": true
  }
}